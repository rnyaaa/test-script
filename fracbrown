        let fractal_brownian;

        let vert = `
        precision highp float;
        attribute vec3 aPosition;

        // The transform of the object being drawn
        uniform mat4 uModelViewMatrix;

        // Transforms 3D coordinates to 2D screen coordinates
        uniform mat4 uProjectionMatrix;

        void main() {
          // Apply the camera transform
          vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);

          // Tell WebGL where the vertex goes
          gl_Position = uProjectionMatrix * viewModelPosition;
        }`;

        let frag = `#ifdef GL_ES
        precision mediump float;
        #endif

        uniform vec2 u_resolution;
        uniform float u_time;

        float random (in vec2 st) {
            return  + fract(sin(dot(st.xy,
                                 vec2(12.9898, 78.233)
                ))*
                43758.5453123);
        }

        // Based on Morgan McGuire @morgan3d
        // https://www.shadertoy.com/view/4dS3Wd
        float noise (in vec2 st) {
            vec2 i = floor(st);
            vec2 f = fract(st);

            // Four corners in 2D of a tile
            float a = random(i);
            float b = random(i + vec2(1.0, 0.0));
            float c = random(i + vec2(0.0, 1.0));
            float d = random(i + vec2(1.0, 1.0));

            vec2 u = f * f * (3.0 - 2.0 * f);

            return mix(a, b, u.x) +
                    (c - a)* u.y * (1.0 - u.x) +
                    (d - b) * u.x * u.y ;
        }

        #define OCTAVES 6
        float fbm (in vec2 st) {
            // Initial values
            float value = 0.0;
            float amplitude = .5;
            float frequency = 0.;
            //
            // Loop of octaves
            for (int i = 0; i < OCTAVES; i++) {
                value += amplitude * noise(st);
                st *=  2.;
                amplitude *= .5;
            }
            return value;
        }

        void main() {
            vec2 st = gl_FragCoord.xy/u_resolution.xy;
            st *=2.0;
            float time = u_time / 1000.0;
            st.x += noise(vec2(time / 32.0, st.y * sin(10.0))) + time / 32.0;
            st.y += noise(vec2(time / 32.0, st.x * cos(10.0))) + time / 32.0;
            vec2 q = vec2(0.);
            q.x = fbm( st + 0.00*time);
            q.y = fbm( st + vec2(1.0));

            vec2 r = vec2(0.);
            r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.025*time );
            r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.039*time);

            float f = fbm(st+r);
            float g = fbm((st + r + f) * 64.0);
            float h = fbm((st + f + g) * 128.0);
            vec3 color = vec3(0.0);

            color = mix(
                      mix(vec3(
                          vec3(0.047, 0.039, 0.243) * pow(
                                                  pow(
                                              h * f * f * g + length(q) - length(r.x),\
                                              pow(q.x * q.y, 0.1 * f * g)),
                                                  1.6)
                              ),
                          vec3(0.0, 1.0- 0.8 * sin(h * sin(g)), 0.4) * pow(
                                          h * f * f * g + length(q) - length(r.x),\
                                          pow(q.x / q.y / length(r), g)),
                          pow(length(r.x), g/g)
                          ),
                      vec3(0.482, 0.118, 0.478) * pow(
                                            pow(h,
                                        pow(q.x / q.y * length(q), h)),
                                            2.5),
                      pow(length(r.y * r.x), f / g / h)
                      );

            if(color.x + color.y + color.z  <  0.1)
            {
              //color = 1.0 - color * 5.0;
              color = vec3(0.0, 0.0, 0.0);
            }
            gl_FragColor = vec4(color * (5.0-h) * pow(g * g + 1.0, length(r))
                          ,1.0);
        }`;

        function setup() {
          console.log("Canvas created"); // Log to verify canvas creation
          createCanvas(windowWidth, windowHeight, WEBGL);
          myShader = createShader(vert, frag);
        }

        function draw() {
          noStroke();

          shader(myShader);

          myShader.setUniform('u_time', millis());
          myShader.setUniform('u_resolution', [width*2, height*2]);

          rect(-width, -height, width*2, height*2);
        }
function windowResized() {
    resizeCanvas(windowWidth, windowHeight);  // This ensures the canvas resizes when the window size changes
}
